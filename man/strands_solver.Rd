% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/strands_solver.R
\name{strands_solver}
\alias{strands_solver}
\title{Strands Solver}
\usage{
strands_solver(
  puzzle,
  dictionary_freq,
  max_words_checked = 1000,
  word_minimum_characters = 4,
  include_all_words_with_at_least_nchars = 6,
  remove_crosses = TRUE,
  return_word_list_only = FALSE,
  check_solutions = TRUE,
  verbose = TRUE
)
}
\arguments{
\item{puzzle}{Matrix of puzzle letters, see example below for formatting.}

\item{dictionary_freq}{A data frame, where the first column is the dictionary of words to use to search for puzzle solutions, and the second column is the frequency of the corresponding word. The default dictionary is \code{data(unigram_freq)}.}

\item{max_words_checked}{Maximum number of words to use in stage 2 when searching for puzzle solutions.}

\item{word_minimum_characters}{Minimum character length for words to be included in the solution.}

\item{include_all_words_with_at_least_nchars}{When searching for solutions in stage 2, use all words that exceed this character count when searching for puzzle solutions.}

\item{remove_crosses}{Do not include words that have letters which cross over each other.}

\item{return_word_list_only}{Only return the words found, not final solutions.}

\item{check_solutions}{Check to make sure that all solutions use every letter exactly once.}

\item{verbose}{Include additional output showing the progress.}
}
\value{
A \code{data.table} with solutions. The column:
\itemize{
\item{\code{word}: }{The word that was found.}
\item{\code{solution_number}: }{A unique ID for each solution.}
\item{\code{n_words}: }{The number of words in each solution.}
\item{\code{freq}: }{The frequency of the word taken from the dictionary.}
\item{\code{min_freq}: }{The frequency of the least frequent word in the solution.}
\item{\code{mean_freq}: }{The mean frequency of the words in the solution.}
\item{\code{letter_1}, \code{letter_2}, etc.: }{The location of the letters in each word on the board (row number, column number).}
}
}
\description{
This function solves the New York Times Strands word game. It works in 2 stages: In the first stage it finds all the words on the board, and in the second stage it tries to find combinations of words that cover the board and form solutions.
}
\examples{
#From New York Times, January 18, 2025

#Hint: O ___! My ___!:
#Solution: crunch obvious planet kangaroo hook captain underpants

\preformatted{puzzle <- matrix(data = c(
 "T", "E", "N", "H", "C", "N",
 "O", "O", "K", "A", "U", "C",
 "R", "A", "H", "O", "L", "R",
 "A", "N", "P", "T", "O", "P",
 "G", "A", "N", "A", "K", "N",
 "C", "E", "D", "U", "I", "O",
 "R", "P", "A", "V", "B", "S",
 "S", "T", "N", "I", "O", "U"
 ), nrow = 8, byrow = TRUE)}

strands_solver(puzzle = puzzle, dictionary_freq = unigram_freq)
}
